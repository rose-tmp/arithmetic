package dp;

/**
 * @author - ZwZ
 * @date - 2020/12/5 - 14:05
 * @Description:96. 不同的二叉搜索树
 * 给定一个整数 n，求以1 ...n为节点组成的二叉搜索树有多少种？
 * <p>
 * 示例:
 * 输入: 3
 * 输出: 5
 * 解释:
 * 给定 n = 3, 一共有 5 种不同结构的二叉搜索树:
 * <p>
 * 1         3    3      2      1
 * \       /     /      / \      \
 * 3     2     1      1   3      2
 * /    /       \                  \
 * 2    1         2                  3
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/unique-binary-search-trees
 */
public class NumTrees {
    /**
     * 这道题不可以像大多数二叉树的问题那样分成一个个的子问题然后使用递归
     * 例如：给定的n和n - 1之间并没有可以一定的递归关系
     * <p>
     * 动态规划：
     * G(n) n个节点(1...n)组成的二叉搜索树一共有多少种
     * <p>
     * G(n) = f(1) + f(2) + ...... + f(n)
     * <p>
     * f(i) 以i为跟节点，二叉搜索树的个数
     * 当i为根节点时，其左子树的节点为1...i-1 右子树的节点为i+1...所以:
     * <p>
     * f(i) = G(i-1) * G(n - i)
     * <p>
     * 解释一下左式的G(n - i):
     * 以1,2,3,4,5,6,7,8,9为例：
     * f(4) = G(3) * G(5)
     * 其中左子树用G(3)表示是没有疑问的  而5,6,7,8,9这5个数组成的4的右子树写成了G(5)[也就是1,2,3,4,5组成的二叉搜索树一共有多少种]
     * 之所以可以这样写是因为1,2,3,4,5 和 5,6,7,8,9组成的二叉搜索树的个数是相同的即G(5) = 以5,6,7,8,9组成的二叉搜索树的个数
     * <p>
     * 由上面两个式子就可以得出：G(n) = G(0) * G(n-1) + G(1) * G(n-2) + G(2) * G(n-3) +......+G(n-1) * G(0)
     */
    public int numTrees(int n) {
        if (n <= 0) {
            return 0;
        }
        int[] G = new int[n + 1];
        G[0] = 1;
        G[1] = 1;
        for (int i = 2; i < n + 1; i++) {
            for (int j = 0; j < i; j++) {
                G[i] += G[j] * G[i - j - 1];
            }
        }
        return G[n];
    }
}
